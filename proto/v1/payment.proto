syntax = "proto3";

package beget.payment.v1.payment;
import "google/api/annotations.proto";
import "payment/proto/v1/structures.proto";


service PaymentService {
    // Получить доступные способы оплаты
    rpc getMethods (GetMethodsRequest) returns (GetMethodsResponse) {
        option (google.api.http) = {
            get: "/v1/payment/method"
        };
    }

    // получить цены за некоторые периоды, в том числе за годовые скидки итд
    rpc calculate (CalculateRequest) returns (CalculateResponse) {
        option (google.api.http) = {
            post: "/v1/payment/calculator"
            body: "*"
        };
    }

    // получить список данных платильщиков для типов платежей, которые требуют заполнения данных
    rpc getPayers (GetPayersRequest) returns (GetPayersResponse) {
        option (google.api.http) = {
            get: "/v1/payment/payer"
        };
    }

    // выставить счёт
    rpc create (CreateRequest) returns (CreateResponse) {
        option (google.api.http) = {
            post: "/v1/payment"
            body: "*"
        };
    }

    // получить статус платежа
    rpc getStatus (GetStatusRequest) returns (GetStatusResponse) {
        option (google.api.http) = {
            get: "/v1/payment/{id}/status"
        };
    }
}
message GetMethodsRequest {
    // получить методы оплаты для конкретного пользователя
    string customer_identifier = 1;
}

message GetMethodsResponse {
    repeated PaymentMethod method = 1;

    message PaymentMethod {
        structures.Currency currency = 1;
        repeated structures.AccountType account_type = 2;
        structures.AccountType default_account_type = 3;
        structures.PaymentType type = 4;
        bool default = 5;
        oneof type_details {
            CardDetails card = 6;
        }
        structures.Country country = 7;

        message CardDetails {
            string number = 1;
        }
    }
}

message CalculateRequest {
    // необходимые периоды в месяцах
    repeated uint32 months = 1;
    // магия для подсчета цены на впс, когда она ещё не подключена
    repeated string option_template = 2;
}
message CalculateResponse {
    oneof result {
        Success success = 1;
        Error error = 2;
    }
    message Success {
        repeated Period period = 1;
        message Period {
            // общая сумма, необходимая для работы аккаунта на указанный период
            uint32 amount = 1;
            structures.Currency currency = 2;
            uint32 months = 3;

            // [детализация] стоимость чистого тарифа за период
            float plan_cost = 5;

            // [детализация] услуги, которые будут продлены в указанное количество месяцев
            repeated PeriodicOptionCharge option_to_renew = 4;

            // [детализация] суммированные списания по ежедневным опциям
            repeated DailyOptionSummary daily_option_cost = 6;

            // [детализация] задолженность, которую необходимо погасить
            // Вычитать из amount с округлением в большую сторону для регулярных платежей
            float debt = 7;

            message PeriodicOptionCharge {
                string type = 1; // системное название
                string name = 2; // человекочитаемое
                float rate = 3;
                string renews_at = 4; // W3C
            }

            message DailyOptionSummary {
                string type = 1; // системное название
                string subtype = 6; // подтип опции
                string name = 2; // человекочитаемое
                uint64 count = 3; // количество
                string unit  = 4; // единица измерения
                float amount = 5; // сумма за период по этой опции
            }
        }
    }
    message Error {
        Code code = 1;
        string message = 2;

        enum Code {
            _ = 0;
            INVALID_PERIOD = 1;
            INVALID_OPTION_TEMPLATE = 2;
        }
    }
}

message GetPayersRequest {
}
message GetPayersResponse {
    repeated PersonPayer person_payer = 1;
    repeated OrgPayer org_payer = 2;

    message PersonPayer {
        string address = 1;
        string name = 2;
        bool default = 3;
    }
    message OrgPayer {
        string address = 1;
        string name = 2;
        string taxpayer_number = 3;
        string kpp = 4;
        string phone = 5;
        bool default = 6;
    }
}

message CreateRequest {
    double amount = 1;
    structures.Currency currency = 2;
    structures.AccountType account_type = 3;

    oneof params {
        BillParams bill = 4;
        LiqpayParams liqpay = 5;
        PaypalParams paypal = 6;
        ReceiptParams receipt = 7;
        RobokassaParams robokassa = 8;
        YandexParams yandex = 9;
        FondyParams fondy = 10;
        LinkedCardParams linked_card = 11;
        CloudPaymentsParams cloudpayments = 14;
    }

    // идентификатор получателя платежа
    string customer_identifier = 12;

    // источник платежа. По умолчанию UNKNOWN
    Source source = 13;

    message LinkedCardParams {
    }

    message BillParams {
        // явная передача данных организации более не поддерживается,
        // всегда используются текущие данные пользоваетля из профиля
        string address = 1 [deprecated=true];
        string name = 2 [deprecated=true];
        string taxpayer_number = 3 [deprecated=true];
        string kpp = 4 [deprecated=true];
        string phone = 5 [deprecated=true];
        // в месяцах период автоотправки счёта пользователю
        uint32 repeat_in_months = 6;
    }
    message LiqpayParams {
        Way way = 1;
        // NOT NONE only for Way.CARD
        structures.RecurringPeriod period = 2;
        string return_url = 3;

        enum Way {
            CARD = 0;
            LIQPAY = 1;
            DELAYED = 2;
        }
    }
    message PaypalParams {
        string return_url = 1;
    }
    message ReceiptParams {
        string address = 1;
        string name = 2;
        // в месяцах период автоотправки квитанции пользователю
        uint32 repeat_in_months = 3;
    }
    message RobokassaParams {
        string return_url = 1;
    }
    message YandexParams {
        Way way = 1;
        // NOT NONE only for Way.CARD
        structures.RecurringPeriod period = 2;
        string return_url = 3;

        enum Way {
            YANDEX_WALLET = 0; // aka PC
            WEBMONEY = 1; // aka WM
            CARD = 2; // aka AC
        }
    }
    message FondyParams {
        string return_url = 1;
    }
    message CloudPaymentsParams {
        string return_url = 1;
        structures.RecurringPeriod period = 2;
    }
    enum Source {
        UNKNOWN = 0;
        CP_PAY = 1;
        CP_MODAL = 2;
        SITE = 3;
    }
}
message CreateResponse {
    oneof result {
        PaymentLocation location = 1;
        Error error = 2;
    }

    message PaymentLocation {
        string url = 1;
        map<string, string> data = 2; // kv for form
        Method method = 3;
        uint32 payment_id = 4;

        enum Method {
            GET = 0;
            POST = 1;
            NONE = 2;
        }
    }
    message Error {
        Code code = 1;
        string message = 2;

        enum Code {
            _ = 0;
            UNAVAILABLE_METHOD = 1;
            UNAVAILABLE_ACCOUNT_TYPE = 2;
            INVALID_AMOUNT = 3;
            INVALID_PERIOD = 4;
            // Не удалось списать средства с привязанной карты
            LINKED_CARD_CHARGING_FAILED = 5;
            LINKED_CARD_OUT_OF_LIMIT = 6;
        }
    }
}

message GetStatusRequest {
    uint32 id = 1;
}

message GetStatusResponse {
    Status status = 1;

    enum Status {
        NOT_COFIRMED = 0;
        CONFIRMED = 1;
        CANCELED = 2;
    }
}

